apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

buildDir = file(project.projectDir.getAbsolutePath() + "/build/")
def generatedPom = file(project.projectDir.getAbsolutePath() + "/generated-pom.xml")
def odooRepoUrl = "https://github.com/odoo/odoo.git"
def testResourcesDir = file(buildDir.getAbsolutePath() + "/tests/resources/")
def initzDir = file(project.projectDir.getAbsolutePath() + "/" + project.name + "/")

def getVersion = {
	def stdout = new ByteArrayOutputStream()
	exec {
		workingDir project.projectDir.getAbsolutePath() + "/" + project.name + "/"
		commandLine 'python',
		'-c',
		'import sys; import ast; file = open("__manifest__.py"); manifest = ast.literal_eval(file.read()); sys.stdout.write(manifest["version"])'
		standardOutput = stdout
	}
	return stdout.toString()
}

project.version = getVersion()
project.group = "net.mekomsolutions.odoo"

task removeOdoo(type: Exec) {
	commandLine 'docker',
	'rm',
	'-vf',
	'dockerfiles_odoo_1'
}

task copyTestResources(type: Copy) {
	from initzDir.getAbsolutePath() + "/tests/resources/"
	into testResourcesDir
	expand(testResources: testResourcesDir.getAbsolutePath(), sources: initzDir.getAbsolutePath())
}

task removeOdooWithCompose(type: Exec) {
	dependsOn copyTestResources
	workingDir testResourcesDir
	commandLine 'docker-compose',
	'-f',
	'dockerfiles/initialize-db.yml',
	'down',
	'-v'
}

task runDbDetached(type: Exec) {
	dependsOn copyTestResources
	workingDir testResourcesDir
	commandLine 'docker-compose',
	'-f',
	'dockerfiles/run-db.yml',
	'up',
	'-d'
}

task initializeDb(type: Exec) {
	dependsOn copyTestResources,
	runDbDetached
	workingDir testResourcesDir
	commandLine 'docker-compose',
	'-f',
	'dockerfiles/initialize-db.yml',
	'up',
	'--abort-on-container-exit'
}

task runTests(type: Exec) {
	dependsOn initializeDb
	workingDir testResourcesDir
	commandLine 'docker-compose',
	'-f',
	'dockerfiles/run-tests.yml',
	'up',
	'--abort-on-container-exit'
}

task setVolumePermissions(type: Exec) {
	dependsOn runDbDetached
	workingDir testResourcesDir
	commandLine 'docker-compose',
	'-f',
	'dockerfiles/set-volume-permissions.yml',
	'up',
	'--abort-on-container-exit'
}

task installBaseAddons(type: Exec) {
	dependsOn setVolumePermissions
	workingDir testResourcesDir
	commandLine 'docker-compose',
	'-f',
	'dockerfiles/install-base-addons.yml',
	'up',
	'--abort-on-container-exit'
}

task processCSVs(type: Exec) {
	dependsOn copyTestResources,
	installBaseAddons
	workingDir testResourcesDir
	commandLine 'docker-compose',
	'-f',
	'dockerfiles/process-csvs.yml',
	'up',
	'--abort-on-container-exit'
}

task runOdoo(type: Exec) {
	dependsOn installBaseAddons
	workingDir testResourcesDir
	commandLine 'docker-compose',
	'-f',
	'dockerfiles/run-with-csvs.yml',
	'up',
	'--abort-on-container-exit'
}

task copySources(type: Copy) {
	from "./" + project.name + "/"
	exclude "tests"
	into "" + buildDir + "/" + project.name + "/"
}

task packageSources(type: Zip) {
	dependsOn copySources
	archiveBaseName = project.name
	archiveVersion = project.version
	from buildDir
  include project.name + '/**/*'
	destinationDirectory = buildDir
}

def getMavenSettingsCredentials = {
    String userHome = System.getProperty( "user.home" );
    File mavenSettings = new File(userHome, ".m2/settings.xml")
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output."servers"."server"
}
def getCredentials = { serverName ->
    def entries = getMavenSettingsCredentials()
    for (entry in entries) {
        if ( entry."id".text() == serverName ) {
            return [username: entry.username.text(), password: entry.password.text()]
    }
  }
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact packageSources
		}
	}
	repositories {
		maven {
			credentials {
				def usernameFromSettingsXML = null
				def passwordFromSettingsXML = null
				if (project.findProperty("repoId")) {
					def creds = getCredentials(project.findProperty("repoId"))
					usernameFromSettingsXML = creds["username"]
					passwordFromSettingsXML = creds["password"]
				}
				username project.findProperty("user") ?: usernameFromSettingsXML
				password project.findProperty("password") ?: passwordFromSettingsXML
			}
			def releasesRepoUrl = "https://nexus.mekomsolutions.net/repository/maven-releases"
			def snapshotsRepoUrl = "https://nexus.mekomsolutions.net/repository/maven-snapshots"
			def nexusUrl = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl: releasesRepoUrl
			url = project.findProperty("url") ?: nexusUrl
		}
	}
}

task createPom {
	doLast {
    pom {
        project {
            groupId project.group
            artifactId project.name
            version project.version
        }
    }.writeTo(generatedPom.getAbsolutePath())
	}
}

test {
	dependsOn runTests, processCSVs
}

task cleanDocker {
  dependsOn removeOdooWithCompose
}

clean {
	delete buildDir.getAbsolutePath()
	delete generatedPom.getAbsolutePath()
}

task run(type: Exec) {
	dependsOn runOdoo
}

install {
  dependsOn createPom, publishMavenJavaPublicationToMavenLocal
}

build {
	dependsOn(test, install)
}
